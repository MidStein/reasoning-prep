import models.Input as Input

TYPES: list[Input.Type] = [
    Input.Type(
        type_name="NUMBER SERIES",
        cases=[
            Input.Case(
                case_name="Completing the Given Series",
                items=[
                    Input.Group(
                        parent_question="Directions : In each of the following questions, a number series is given with one term missing. Choose the correct alternative that will continue the same pattern and fill in the blank spaces.",
                        questions=[
                            "1, 4, 9, 16, 25, (.....)",
                            "20, 19, 17, (.....), 10, 5",
                            "2, 3, 5, 7, 11, (.....), 17",
                            "6, 11, 21, 36, 56, (.....)",
                            "1, 6, 13, 22, 33, (.....)",
                            "3, 9, 27, 81, (.....)",
                            "1, 9, 17, 33, 49, 73, (.....)",
                            "2, 5, 9, (.....), 20, 27",
                            "5, 9, 17, 29, 45, (.....)",
                            "3, 7, 15, 31, 63, (.....)",
                            "1, 6, 15, (.....), 45, 66, 91",
                            "1, 2, 3, 5, 8, (.....)",
                            "0.5, 1.5, 4.5, 13.5, (.....)",
                            "121, 225, 361, (.....)",
                            "0, 2, 8, 14, (.....), 34",
                            "19, 2, 38, 3, 114, 4, (.....)",
                            "1, 2, 3, 6, 9, 18, (.....), 54",
                            "4, 5, 9, 18, 34, (.....)",
                            "3, 6, 18, 72, (.....)",
                            "66, 36, 18, (.....)",
                            "21, 25, 33, 49, 81, (.....)",
                            "12, 32, 72, 152, (.....)",
                            "3, 6, 5, 20, 7, 42, 9, (.....)",
                            "1, 3, 4, 8, 15, 27, (.....)",
                            "2, 15, 41, 80, (.....)",
                            "8, 10, 14, 18, (.....), 34, 50, 66",
                            "1, 2, 6, 24, (.....)",
                            "2, 3, 8, 63, (.....)",
                            "95, 115.5, 138, (.....), 189",
                            "4, 10, (.....), 82, 244, 730",
                            "4, 32, 128, (.....)",
                            "2, 5, 9, 19, 37, (.....)",
                            "24, 60, 120, 210, (.....)",
                            "165, 195, 255, 285, 345, (.....)",
                            "5, 17, 37, 65, (.....), 145",
                            "9, 11, 20, 31, (.....), 82",
                            "5, 16, 49, 104, (.....)",
                            "34, 18, 10, 6, 4, (.....)",
                            "462, 420, 380, (.....), 306",
                            "3, 8, 22, 63, 185, (.....)",
                            "1, 2, 5, 12, 27, 58, 121, (.....)",
                            "0.5, 0.55, .65, 0.8, (.....)",
                            "3, 8, 13, 24, 41, (.....)",
                            "97, 86, 73, 58, 45, (.....)",
                            "17, 19, 23, 29, (.....), 37",
                            "5, 6, 9, 15, (.....), 40",
                            "3, 12, 27, 48, 75, 108, (.....)",
                            "134, 245, 356, 467, (.....)",
                            "6, 13, 28, (.....)",
                            "563, 647, 479, 815, (.....)",
                            "11, 12, 17, 18, 23, 24, (.....)",
                            "225, 336, 447, (.....), 669, 7710",
                            "840, 168, 42, 14, 7, (.....)",
                            "5, 6, 7, 8, 10, 11, 14, (.....)",
                            "0, 2, 3, 5, 8, 10, 15, 17, 24, 26, (.....)",
                            "0, 4, 6, 3, 7, 9, 6, (.....), 12",
                            "1, 1, 3, 9, 6, 36, 10, 100, (.....), 225",
                            "2, 1, 2, 4, 4, 5, 6, 7, 8, 8, 10, 11, (.....)",
                            "4, 23, 60, 121, (.....)",
                            "1, 4, 2, 8, 6, 24, 22, 88, (.....)",
                            "13, 32, 24, 43, 35, (.....), 46, 65, 57, 76",
                            "3, 4, 7, 7, 13, 13, 21, 22, 31, 44, (.....)",
                            "2, 6, 12, 20, 30, 42, 56, (.....)",
                            "8, 9, 8, 7, 10, 9, 6, 11, 10, (.....), 12",
                            "90, 180, 12, 50, 100, 200, (.....), 3, 50, 4, 25, 2, 6, 30, 3",
                            "11, 10, (.....), 100, 1001, 1000, 10001",
                            "123456147, 12345614, 2345614, 234561, (.....)",
                            "\\(\\frac{4}{9}\\), \\(\\frac{9}{20}\\), \\(\\frac{39}{86}\\)",
                            "\\(\\frac{2}{\\sqrt{5}}\\), \\(\\frac{3}{5}\\), \\(\\frac{4}{5\\sqrt{5}}\\), \\(\\frac{5}{25}\\)",
                            "11\\(\\frac{1}{9}\\), 12\\(\\frac{1}{2}\\), 14\\(\\frac{2}{7}\\), 16\\(\\frac{2}{3}\\)",
                            "(2, 3), (3, 5), (5, 7), (7, 11), (11, 13), (.....)",
                        ],
                        from_question=1,
                    )
                ],
            ),
            Input.Case(
                case_name="Finding the Wrong Term in the Given Series",
                items=[
                    Input.Group(
                        parent_question="Directions : In each of the following questions, one term in the number series is wrong. Find out the wrong term.",
                        questions=[
                            "24, 27, 31, 33, 36",
                            "196, 169, 144, 121, 80",
                            "3, 5, 7, 9, 11, 13",
                            "121, 143, 165, 186, 209",
                            "1, 2, 4, 8, 16, 32, 64, 96",
                            "8, 14, 26, 48, 98, 194, 386",
                            "8, 13, 21, 32, 47, 63, 83",
                            "3, 10, 27, 4, 16, 64, 5, 25, 125",
                            "380, 188, 92, 48, 20, 8, 2",
                            "1, 3, 7, 15, 27, 63, 127",
                            "5, 10, 17, 24, 37",
                            "1, 3, 10, 21, 64, 129, 256, 778",
                            "15, 16, 22, 29, 45, 70",
                            "6, 14, 30, 64, 126",
                            "10, 26, 74, 218, 654, 1946, 5834",
                            "3, 7, 15, 39, 63, 127, 255, 511",
                            "445, 221, 109, 46, 25, 11, 4",
                            "1236, 2346, 3456, 4566, 5686",
                            "5, 10, 40, 80, 320, 550, 2560",
                            "3, 2, 8, 9, 13, 22, 18, 32, 23, 42",
                            "8, 27, 125, 343, 1331",
                            "10, 14, 28, 32, 64, 68, 132",
                            "1, 5, 5, 9, 7, 11, 11, 15, 12, 17",
                            "11, 2, 21, 3, 32, 4, 41, 5, 51, 6",
                            "11, 5, 20, 12, 40, 26, 74, 54",
                            "56, 72, 90, 110, 132, 150",
                            "8, 13, 21, 32, 47, 63, 83",
                            "89, 78, 86, 80, 85, 82, 83",
                            "25, 36, 49, 81, 121, 169, 225",
                            "2, 5, 10, 17, 26, 37, 50, 64",
                            "1, 5, 9, 16, 25, 37, 49,",
                            "2, 5, 10, 50, 500, 5000",
                            "46080, 3840, 384, 48, 24, 2, 1",
                            "105, 85, 60, 30, 0, -45, -90,",
                            "325, 259, 202, 160, 127, 105, 94",
                            "125, 126, 124, 127, 123, 129",
                            "3, 4, 10, 32, 136, 685, 4116",
                            "3, 10, 27, 4, 16, 64, 5, 25, 125",
                            "5, 27, 61, 122, 213, 340, 509",
                            "16, 22, 30, 45, 52, 66",
                        ],
                        from_question=1,
                    ),
                    Input.Group(
                        parent_question="Directions : In each of the following number series, either one term is missing or is wrong which has been given as one of the four alternatives under it. This alternative is your answer.",
                        questions=[
                            "1, 2, 5, 10, 17, 28",
                            "1, 5, 11, 19, 29, 55",
                            "2, 3, 5, 8, 13, 34",
                            "0, 3, 8, 15, 24, 33",
                            "1, 5, 14, 30, 55, 93",
                        ],
                        from_question=41,
                    ),
                    Input.Group(
                        parent_question="Directions : In each of the followsing number series, two terms have been put within brackets. Mark your answer as<br>(a) if both the bracketed terms are right;<br>(b) if the first bracketed term is right and second is wrong;<br>(c) if the first bracketed term is wrong and second is right;<br>(d) if both the bracketed terms are wrong.",
                        questions=[
                            "4, 6, 10, (12), 16, (14), 22",
                            "3, 10, 29, (66), (127), 218,",
                            "2, 3, (6), 11, 18, (30), 38",
                            "(2), 5, (12), 25, 41, 61",
                            "4, 7, (9), 10, 13, 15, (16), 19",
                        ],
                        from_question=46,
                        no_options=True,
                    ),
                ],
            ),
        ],
    ),
    Input.Type(
        type_name="ALPHABET SERIES",
        cases=[
            Input.Case(
                items=[
                    Input.Group(
                        parent_question="Directions : In each of the following questions, various terms of a letter series are given with one term missing as shows by (?). Choose the missing term out of the given alternatives.",
                        questions=[
                            "U, O, I, ?, A",
                            "Y, W, U, S, Q, ?, ?",
                            "A, B, D, G, ?",
                            "Z, U, Q, ?, L",
                            "A, C, F, H, ?, M",
                            "A, Z, X, B, V, T, C, R, ?, ?",
                            "R, M, ?, F, D, ?",
                            "Z, L, X, J, V, H, T, F, ?, ?",
                            "Z, S, W, O, T, K, Q, G, ?, ?",
                            "W, V, T, S, Q, P, N, M, ?, ?",
                            "Z, Y, X, U, T, S, P, O, N, K, ?, ?",
                            "b e d f ? h j ? l",
                            "AZ, BY, CX, ?",
                            "AZ, CX, FU, ?",
                            "AZ, GT, MN, ?, YB",
                            "BF, CH, ?, HO, LT",
                            "CE, GI, KM, OQ, ?",
                            "BD, GI, LN, QS, ?",
                            "AD, EH, IL, ?, QT",
                            "JE, LH, OL, SQ, ?",
                            "DF, GJ, KM, NQ, RT, ?",
                            "CX FU, IR ? OL RI",
                            "OTE, PUF, QVG, RWH, ?",
                            "eac gce ieg ?",
                            "ejo tyd ins xch ?",
                            "CAT, FDW, IGZ, ?",
                            "BEH, KNQ, TWZ, ?",
                            "deb ijg nol ? xyv",
                            "? siy oeu kaq gwm cri",
                            "QPO, SRQ, UTS, WVU, ?",
                            "? ayw gec mki sqo",
                            "dfe jih mln ? vut",
                            "DEF, HIJ, MNO, ?",
                            "FLP, INS, LPV, ?",
                            "shg rif qje pkd ?",
                            "LXF, MTJ, NPN, OLR, ?",
                            "MHZ, NIW, OKT, PNQ, ?",
                            "AYD, BVF, DRH, ?, KGL",
                            "AB, BA, ABC, CBA, ABCD, ?",
                            "AB, DEF, HIJK, ?, STUVWX",
                            "A, CD, GHI, ?, UVWXY",
                        ],
                        from_question=1,
                    ),
                    Input.Group(
                        parent_question="Directions : In each of the followsing number series, a sequence of groups of letters and numbers is given with one term missing as shown by (?). Choose the missing term out of the given alternatives.",
                        questions=[
                            "D-4, F-6, H-8, J-10, ?, ?",
                            "3F, 6G, 11I, 18L, ?",
                            "KM5, IP8, GS11, EV14, ?",
                            "J2Z, K4X, I7V, ?, H16R, M22P",
                            "2Z5, 7Y7, 14X9, 23W11, 34V13, ?",
                            "2A11, 4D13, 12G17, ?",
                            "C4X, F9U, I16R, ?",
                            "Q1F, S2E, U6D, W21C, ?",
                        ],
                        from_question=42,
                    ),
                    Input.Individual_Question(
                        question="Find the wrong term in the letter-number series given below :<br>G4T, J10R, M20P, P43N, S90L",
                        number=50,
                    ),
                ]
            ),
        ],
    ),
    Input.Type(
        type_name="LETTER SERIES",
        cases=[
            Input.Case(
                items=[
                    Input.Group(
                        parent_question="Directions : In each of the following letter series, some of the letters are missing which are given in that order as one of the alternatives below it. Choose the correct alternative.",
                        questions=[
                            "_ _ aba _ _ ba _ ab",
                            "ab _ _ _ b _ bbaa _",
                            "_ baa _ aab _ a _ a",
                            "_ _ babbba _ a _ _",
                            "aa _ ab _ _ aaa _ a",
                            "a _ bbc _ aab _ cca _ bbcc",
                            "ab _ aa _ bbb _ aaa _ bbba",
                            "bc _ b _ c _ b _ ccb",
                            "abb _ baa _ a _ bab _ aba",
                            "abca _ bcaab _ ca _ bbc _ a",
                            "_ bbca _ bcca _ ac _ a _ cb",
                            "_ bcc _ ac _ aabb _ ab _ cc",
                            "a _ bccb _ ca _ cca _ baab _ c",
                            "ab _ aa _ caab_ c _ abb _ c",
                            "c _ baa _ aca _ cacab _ acac _ bca",
                            "_ aba _ cabc _ dcba _ bab _ a",
                            "a _ cdaab _ cc _ daa _ bbb _ ccddd",
                            "a _ abbb _ ccccd _ ddccc _ bb _ ba",
                            "_ bcdbc _ dcabd _ bcdbc _ dc _ bd",
                            "adb _ ac _ da _ cddcb _ dbc _ cbda",
                            "c _ bbb _ _ abbbb _ abbb _",
                            "b _ abbc _ bbca _ bcabb _ ab",
                            "ac _ cab _ baca _ aba _ acac",
                            "_ acca _ ccca _ acccc _ aaa",
                            "_ bc _ _ bb _ aabc",
                            "aa _ aaa _ aaaa _ aaaa _ b",
                            "aba _ baca _ ba _ bacaabac _ aca",
                            "ab _ bc _ c _ ba _ c",
                            "a _ ca _ bc _ bcc _ bca",
                            "ab _ bcbca _ _ c _ bab",
                            "a _ cacbc _ baca _ _ b",
                            "_ aaba _ bba _ bba _ abaa _ b",
                            "ab _ bbc _ c _ ab _ ab _ b",
                            "_ bca _ cca _ ca _ b _ c",
                            "b _ ac _ cc _ cb _ ab _ ac",
                            "c _ ac _ aa _ aa _ bc _ bcc",
                            "abc _ d _ bc _ d _ b _ cda",
                            "ba _ b _ aab _ a _ b",
                            "gfe _ ig _ eii _ fei _ gf _ ii",
                            "mnonopqopqrs _ _ _ _ _",
                            "aab _ ab _ cabcca _ bcab _ c",
                            "ccbab _ caa _ bccc _ a _",
                            "ba _ b _ aabb _ a _ _ a _ bb",
                            "a _ c _ abb _ a _ bc _ bc _ ab",
                            "cab _ a _ c _ bc _ bc _ b _ ab",
                            "cccbb _ aa _ cc _ bbbaa _ c",
                            "_ abb _ _ bb _ a _ bbab _ ba",
                            "ccb _ c _ bbc _ b _ cc _ _ ccbb",
                            "abca _ bcaab _ aa _ caa _ c",
                            "b _ b _ bb _ _ bbb _ bb _ b",
                            "c _ bba _ cab _ ac _ ab _ ac",
                            "a _ bc _ c _ abb _ bca _",
                            "_ c _ bd _ cbcda _ a _ db _ a",
                            "a _ bc _ a _ bcda _ ccd _ bcd _",
                            "_ cb _ ca _ bacb _ ca _ bac _ d",
                        ],
                        from_question=1,
                    ),
                    Input.Group(
                        parent_question="Directions : In each of the followsing number questions, three sequences of letters/numerals are given which correspond to each other other in some way. In each question, you have to find out the letters/numerals that come in the vacant places marked by (?). These are given as one of the four alternatives under the question. Mark your answer as instructed.",
                        questions=[
                            "C B _ _ D _ B A B C C B<br>_ _ 1 2 4 3 _ _ ? ? ? ?<br>a _ a b _ c _ b _ _ _ _",
                            "_ A C _ B D _ C D C D<br>2 _ 4 1 _ 1 4 _ _ _ _<br>c d _ b c _ a ? ? ? ?",
                            "C _ B _ D _ A _ B B D D<br>2 _ _ 4 _ 3 4 _ ? ? ? ?<br>_ a _ c b a _ d _ _ _ _",
                            "A _ B A C _ D _ B C D C<br>_ 3 _ 2 _ 1 _ 4 ? ? ? ?<br>d c _ _ b a c b _ _ _ _",
                            "_ A D A C B _ _ B D C C<br>1 3 _ _ 1 2 4 2 _ _ _ _<br>a _ _ b _ _ c d ? ? ? ?",
                        ],
                        from_question=56,
                    ),
                ]
            ),
        ],
    ),
]
